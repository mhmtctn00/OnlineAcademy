// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineAcademy.DataAccess.Concrete.EntityFramework.Contexts;

namespace OnlineAcademy.DataAccess.Migrations
{
    [DbContext(typeof(EfOnlineAcademyContext))]
    partial class EfOnlineAcademyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Entities.Concrete.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsModified")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Initial Create",
                            CreatedDate = new DateTime(2021, 3, 29, 22, 37, 48, 975, DateTimeKind.Local).AddTicks(5940),
                            IsActive = true,
                            IsDeleted = false,
                            IsModified = false,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Initial Create",
                            CreatedDate = new DateTime(2021, 3, 29, 22, 37, 48, 975, DateTimeKind.Local).AddTicks(5968),
                            IsActive = true,
                            IsDeleted = false,
                            IsModified = false,
                            Name = "Moderator"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Initial Create",
                            CreatedDate = new DateTime(2021, 3, 29, 22, 37, 48, 975, DateTimeKind.Local).AddTicks(5972),
                            IsActive = true,
                            IsDeleted = false,
                            IsModified = false,
                            Name = "Teacher"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "Initial Create",
                            CreatedDate = new DateTime(2021, 3, 29, 22, 37, 48, 975, DateTimeKind.Local).AddTicks(5976),
                            IsActive = true,
                            IsDeleted = false,
                            IsModified = false,
                            Name = "Student"
                        });
                });

            modelBuilder.Entity("Core.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsModified")
                        .HasColumnType("bit");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("Core.Entities.Concrete.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 4
                        });
                });

            modelBuilder.Entity("OnlineAcademy.Entities.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsModified")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Initial Create",
                            CreatedDate = new DateTime(2021, 3, 29, 22, 37, 48, 950, DateTimeKind.Local).AddTicks(5243),
                            IsActive = true,
                            IsDeleted = false,
                            IsModified = false,
                            Name = "Yazılım Geliştirme"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Initial Create",
                            CreatedDate = new DateTime(2021, 3, 29, 22, 37, 48, 950, DateTimeKind.Local).AddTicks(8766),
                            IsActive = true,
                            IsDeleted = false,
                            IsModified = false,
                            Name = "İşletme"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Initial Create",
                            CreatedDate = new DateTime(2021, 3, 29, 22, 37, 48, 950, DateTimeKind.Local).AddTicks(8772),
                            IsActive = true,
                            IsDeleted = false,
                            IsModified = false,
                            Name = "Web Geliştirme",
                            ParentId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "Initial Create",
                            CreatedDate = new DateTime(2021, 3, 29, 22, 37, 48, 950, DateTimeKind.Local).AddTicks(8776),
                            IsActive = true,
                            IsDeleted = false,
                            IsModified = false,
                            Name = "Veri Bilimi",
                            ParentId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "Initial Create",
                            CreatedDate = new DateTime(2021, 3, 29, 22, 37, 48, 950, DateTimeKind.Local).AddTicks(8780),
                            IsActive = true,
                            IsDeleted = false,
                            IsModified = false,
                            Name = "JavaScript",
                            ParentId = 3
                        },
                        new
                        {
                            Id = 6,
                            CreatedByName = "Initial Create",
                            CreatedDate = new DateTime(2021, 3, 29, 22, 37, 48, 950, DateTimeKind.Local).AddTicks(8783),
                            IsActive = true,
                            IsDeleted = false,
                            IsModified = false,
                            Name = "React",
                            ParentId = 3
                        });
                });

            modelBuilder.Entity("OnlineAcademy.Entities.Concrete.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsModified")
                        .HasColumnType("bit");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Initial Create",
                            CreatedDate = new DateTime(2021, 3, 29, 22, 37, 48, 958, DateTimeKind.Local).AddTicks(9295),
                            IsActive = true,
                            IsDeleted = false,
                            IsModified = false,
                            LessonId = 1,
                            Message = "Eğitim çok başarılı.",
                            Title = "Teşekkür",
                            UserId = 3
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Initial Create",
                            CreatedDate = new DateTime(2021, 3, 29, 22, 37, 48, 958, DateTimeKind.Local).AddTicks(9347),
                            IsActive = true,
                            IsDeleted = false,
                            IsModified = false,
                            LessonId = 1,
                            Message = "Tebrikler. Eğitim çok başarılı.",
                            Title = "Tebrik",
                            UserId = 4
                        });
                });

            modelBuilder.Entity("OnlineAcademy.Entities.Concrete.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsModified")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RateCount")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Initial Create",
                            CreatedDate = new DateTime(2021, 3, 29, 22, 37, 48, 967, DateTimeKind.Local).AddTicks(4500),
                            Description = "Bu kursta sıfırdan başlayarak ileri düzeyde React öğreneceksiniz.",
                            IsActive = true,
                            IsDeleted = false,
                            IsModified = false,
                            Price = 0m,
                            Rate = 0m,
                            RateCount = 0,
                            Title = "Sıfırdan İleri Seviye React Kursu!"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Initial Create",
                            CreatedDate = new DateTime(2021, 3, 29, 22, 37, 48, 967, DateTimeKind.Local).AddTicks(4558),
                            Description = "Bu kursta sıfırdan başlayarak ileri düzeyde JavaScript öğreneceksiniz.",
                            IsActive = true,
                            IsDeleted = false,
                            IsModified = false,
                            Price = 0m,
                            Rate = 0m,
                            RateCount = 0,
                            Title = "Sıfırdan İleri Seviye JavaScript Kursu!"
                        });
                });

            modelBuilder.Entity("OnlineAcademy.Entities.Concrete.CourseCategory", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("CourseCategories");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            CourseId = 1,
                            CategoryId = 3
                        },
                        new
                        {
                            CourseId = 1,
                            CategoryId = 6
                        },
                        new
                        {
                            CourseId = 2,
                            CategoryId = 1
                        },
                        new
                        {
                            CourseId = 2,
                            CategoryId = 3
                        },
                        new
                        {
                            CourseId = 2,
                            CategoryId = 5
                        });
                });

            modelBuilder.Entity("OnlineAcademy.Entities.Concrete.CourseInstructor", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CourseTeachers");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            UserId = 1
                        },
                        new
                        {
                            CourseId = 1,
                            UserId = 2
                        },
                        new
                        {
                            CourseId = 2,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("OnlineAcademy.Entities.Concrete.CourseStudent", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CourseStudents");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            UserId = 3
                        },
                        new
                        {
                            CourseId = 1,
                            UserId = 4
                        },
                        new
                        {
                            CourseId = 2,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("OnlineAcademy.Entities.Concrete.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsModified")
                        .HasColumnType("bit");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Video")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Initial Create",
                            CreatedDate = new DateTime(2021, 3, 29, 22, 37, 48, 973, DateTimeKind.Local).AddTicks(6886),
                            IsActive = true,
                            IsDeleted = false,
                            IsModified = false,
                            Length = 15,
                            SectionId = 1,
                            Title = "Section 1 Lesson 1",
                            Video = "https://www.youtube.com/watch?v=w7ejDZ8SWv8&ab_channel=TraversyMedia"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Initial Create",
                            CreatedDate = new DateTime(2021, 3, 29, 22, 37, 48, 973, DateTimeKind.Local).AddTicks(6937),
                            IsActive = true,
                            IsDeleted = false,
                            IsModified = false,
                            Length = 23,
                            SectionId = 1,
                            Title = "Section 1 Lesson 2",
                            Video = "https://www.youtube.com/watch?v=dGcsHMXbSOA&ab_channel=DevEd"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Initial Create",
                            CreatedDate = new DateTime(2021, 3, 29, 22, 37, 48, 973, DateTimeKind.Local).AddTicks(6941),
                            IsActive = true,
                            IsDeleted = false,
                            IsModified = false,
                            Length = 23,
                            SectionId = 2,
                            Title = "Section 2 Lesson 1",
                            Video = "https://www.youtube.com/watch?v=Law7wfdg_ls&ab_channel=DevEd"
                        });
                });

            modelBuilder.Entity("OnlineAcademy.Entities.Concrete.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CorseId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsModified")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("CorseId");

                    b.ToTable("Sections");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CorseId = 1,
                            CreatedByName = "Initial Create",
                            CreatedDate = new DateTime(2021, 3, 29, 22, 37, 48, 981, DateTimeKind.Local).AddTicks(4961),
                            IsActive = true,
                            IsDeleted = false,
                            IsModified = false,
                            Title = "Course 1 Section 1"
                        },
                        new
                        {
                            Id = 2,
                            CorseId = 1,
                            CreatedByName = "Initial Create",
                            CreatedDate = new DateTime(2021, 3, 29, 22, 37, 48, 981, DateTimeKind.Local).AddTicks(5019),
                            IsActive = true,
                            IsDeleted = false,
                            IsModified = false,
                            Title = "Course 1 Section 2"
                        },
                        new
                        {
                            Id = 3,
                            CorseId = 2,
                            CreatedByName = "Initial Create",
                            CreatedDate = new DateTime(2021, 3, 29, 22, 37, 48, 981, DateTimeKind.Local).AddTicks(5023),
                            IsActive = true,
                            IsDeleted = false,
                            IsModified = false,
                            Title = "Course 2 Section 1"
                        });
                });

            modelBuilder.Entity("OnlineAcademy.Entities.Concrete.User", b =>
                {
                    b.HasBaseType("Core.Entities.Concrete.User");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Initial Create",
                            CreatedDate = new DateTime(2021, 3, 29, 22, 37, 48, 983, DateTimeKind.Local).AddTicks(7143),
                            Email = "mhmt.cetin00@gmail.com",
                            Firstname = "Mehmet",
                            IsActive = true,
                            IsDeleted = false,
                            IsModified = false,
                            Lastname = "Çetin",
                            PasswordHash = new byte[] { 1, 2, 3, 4 },
                            PasswordSalt = new byte[] { 1, 2, 3, 4 }
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Initial Create",
                            CreatedDate = new DateTime(2021, 3, 29, 22, 37, 48, 983, DateTimeKind.Local).AddTicks(7209),
                            Email = "mail@mail.com",
                            Firstname = "MailF",
                            IsActive = true,
                            IsDeleted = false,
                            IsModified = false,
                            Lastname = "MailL",
                            PasswordHash = new byte[] { 1, 2, 3, 4 },
                            PasswordSalt = new byte[] { 1, 2, 3, 4 }
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Initial Create",
                            CreatedDate = new DateTime(2021, 3, 29, 22, 37, 48, 983, DateTimeKind.Local).AddTicks(7216),
                            Email = "student1@gmail.com",
                            Firstname = "student1F",
                            IsActive = true,
                            IsDeleted = false,
                            IsModified = false,
                            Lastname = "student1L",
                            PasswordHash = new byte[] { 1, 2, 3, 4 },
                            PasswordSalt = new byte[] { 1, 2, 3, 4 }
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "Initial Create",
                            CreatedDate = new DateTime(2021, 3, 29, 22, 37, 48, 983, DateTimeKind.Local).AddTicks(7304),
                            Email = "student2@mail.com",
                            Firstname = "student2F",
                            IsActive = true,
                            IsDeleted = false,
                            IsModified = false,
                            Lastname = "student2L",
                            PasswordHash = new byte[] { 1, 2, 3, 4 },
                            PasswordSalt = new byte[] { 1, 2, 3, 4 }
                        });
                });

            modelBuilder.Entity("Core.Entities.Concrete.UserRole", b =>
                {
                    b.HasOne("Core.Entities.Concrete.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Concrete.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineAcademy.Entities.Concrete.Comment", b =>
                {
                    b.HasOne("OnlineAcademy.Entities.Concrete.Lesson", "Lesson")
                        .WithMany("Comments")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineAcademy.Entities.Concrete.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineAcademy.Entities.Concrete.CourseCategory", b =>
                {
                    b.HasOne("OnlineAcademy.Entities.Concrete.Category", "Category")
                        .WithMany("CourseCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineAcademy.Entities.Concrete.Course", "Course")
                        .WithMany("CourseCategories")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("OnlineAcademy.Entities.Concrete.CourseInstructor", b =>
                {
                    b.HasOne("OnlineAcademy.Entities.Concrete.Course", "Course")
                        .WithMany("CourseInstructors")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineAcademy.Entities.Concrete.User", "User")
                        .WithMany("CourseInstructors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineAcademy.Entities.Concrete.CourseStudent", b =>
                {
                    b.HasOne("OnlineAcademy.Entities.Concrete.Course", "Course")
                        .WithMany("CourseStudents")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineAcademy.Entities.Concrete.User", "User")
                        .WithMany("CourseStudents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineAcademy.Entities.Concrete.Lesson", b =>
                {
                    b.HasOne("OnlineAcademy.Entities.Concrete.Section", "Section")
                        .WithMany("Lessons")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("OnlineAcademy.Entities.Concrete.Section", b =>
                {
                    b.HasOne("OnlineAcademy.Entities.Concrete.Course", "Course")
                        .WithMany("Sections")
                        .HasForeignKey("CorseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Core.Entities.Concrete.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Core.Entities.Concrete.User", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("OnlineAcademy.Entities.Concrete.Category", b =>
                {
                    b.Navigation("CourseCategories");
                });

            modelBuilder.Entity("OnlineAcademy.Entities.Concrete.Course", b =>
                {
                    b.Navigation("CourseCategories");

                    b.Navigation("CourseInstructors");

                    b.Navigation("CourseStudents");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("OnlineAcademy.Entities.Concrete.Lesson", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("OnlineAcademy.Entities.Concrete.Section", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("OnlineAcademy.Entities.Concrete.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("CourseInstructors");

                    b.Navigation("CourseStudents");
                });
#pragma warning restore 612, 618
        }
    }
}
